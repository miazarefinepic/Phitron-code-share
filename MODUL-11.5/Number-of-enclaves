class Solution {
public:
    int n,m;
    int comp_size;
    bool edge;
    vector<pair<int,int>> d = {{1,0},{-1,0},{0,1},{0,-1}};
    bool vis[505][505];
    bool valid(int i,int j){
        if(i<0 || i>=n || j<0 || j>=m)
            return false;
        return true;
    }
    void dfs(int si,int sj,vector<vector<int>>& grid){
        vis[si][sj] = true;
        comp_size++;
        for(int i=0;i<4;i++){
            int ci = si + d[i].first;
            int cj = sj + d[i].second;
            if(!valid(ci,cj))
                edge = false;
            if(valid(ci,cj) && !vis[ci][cj] && grid[ci][cj]==1)
                dfs(ci,cj,grid);
        }

    }
    int numEnclaves(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        memset(vis,false,sizeof(vis));
        int sum = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && !vis[i][j]){
                    comp_size = 0;
                    edge = true;
                    dfs(i,j,grid);
                    if(edge){
                        sum += comp_size;
                    }
                }
            }
        }
        return sum;
    }
};
